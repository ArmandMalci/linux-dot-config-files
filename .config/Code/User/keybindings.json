[
  {
    "key": "alt+n",
    "command": "extension.advancedNewFile"
  },
  {
    "key": "ctrl+alt+n",
    "command": "-extension.advancedNewFile"
  },
  {
    "key": "ctrl+shift+b",
    "command": "workbench.action.toggleActivityBarVisibility"
  },
  {
    "key": "ctrl+alt+l",
    "command": "workbench.action.editor.changeLanguageMode",
    "when": "!notebookEditorFocused"
  },
  {
    "key": "ctrl+k m",
    "command": "-workbench.action.editor.changeLanguageMode",
    "when": "!notebookEditorFocused"
  },
  {
    "key": "shift+alt+l",
    "command": "turboConsoleLog.displayLogMessage"
  },
  {
    "key": "ctrl+alt+l",
    "command": "-turboConsoleLog.displayLogMessage"
  },
  {
    "key": "ctrl+shift+d",
    "command": "lafe.duplicateCode"
  },
  {
    "key": "ctrl+k d",
    "command": "-lafe.duplicateCode"
  },
  {
    "key": "ctrl+shift+k",
    "command": "workbench.action.terminal.clear",
    "when": "terminalFocus && terminalProcessSupported && terminalTextSelected && terminalTextSelected"
  },
  // new ones

  // Trigger vspacecode in empty editor group
  {
    "key": "space",
    "command": "vspacecode.space",
    "when": "activeEditorGroupEmpty && focusedView == '' && !whichkeyActive && !inputFocus"
  },
  // Trigger vspacecode when sidebar is in focus
  {
    "key": "space",
    "command": "vspacecode.space",
    "when": "sideBarFocus && !inputFocus && !whichkeyActive"
  },
  // Keybindings required for edamagit
  // https://github.com/kahole/edamagit#vim-support-vscodevim
  // Cannot be added to package.json because keybinding replacements
  {
    "key": "tab",
    "command": "extension.vim_tab",
    "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
  },
  {
    "key": "tab",
    "command": "-extension.vim_tab",
    "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "x",
    "command": "magit.discard-at-point",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "k",
    "command": "-magit.discard-at-point"
  },
  {
    "key": "-",
    "command": "magit.reverse-at-point",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "v",
    "command": "-magit.reverse-at-point"
  },
  {
    "key": "shift+-",
    "command": "magit.reverting",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "shift+v",
    "command": "-magit.reverting"
  },
  {
    "key": "shift+o",
    "command": "magit.resetting",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "shift+x",
    "command": "-magit.resetting"
  },
  {
    "key": "x",
    "command": "-magit.reset-mixed"
  },
  {
    "key": "ctrl+u x",
    "command": "-magit.reset-hard"
  },
  // Extra ref menu support for edamagit with the key "y"
  // Cannot be added to package.json because keybinding replacements
  {
    "key": "y",
    "command": "-magit.show-refs"
  },
  {
    "key": "y",
    "command": "vspacecode.showMagitRefMenu",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode == 'Normal'"
  },
  // Easy navigation in quick open/QuickPick
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  // Easy navigation in sugesstion/intellisense
  // Cannot be added to package.json because of conflict with vim's default bindings
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+l",
    "command": "acceptSelectedSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  // Easy navigation in parameter hint (i.e. traverse the hints when there's multiple overload for one method)
  // Cannot be added to package.json because of conflict with vim's default bindings
  {
    "key": "ctrl+j",
    "command": "showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+k",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  // Add ctrl+h/l to navigate in file browser
  {
    "key": "ctrl+h",
    "command": "file-browser.stepOut",
    "when": "inFileBrowser"
  },
  {
    "key": "ctrl+l",
    "command": "file-browser.stepIn",
    "when": "inFileBrowser"
  },
  {
    "key": "shift+alt+e",
    "command": "workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled"
  },
  {
    "key": "ctrl+shift+e",
    "command": "-workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled"
  },
  {
    "key": "shift+alt+right",
    "command": "bracket-pair-colorizer-2.expandBracketSelection",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+left",
    "command": "bracket-pair-colorizer-2.undoBracketSelection",
    "when": "editorTextFocus"
  },

  { "key": "shift+alt+x", "command": "workbench.action.terminal.kill" },
  { "key": "shift+alt+j", "command": "workbench.action.terminal.focusNext" },
  {
    "key": "shift+alt+k",
    "command": "workbench.action.terminal.focusPrevious"
  },
  {
    "key": "ctrl+c",
    "command": "workbench.action.terminal.copySelection",
    "when": "terminalFocus && terminalTextSelected"
  },
  {
    "key": "ctrl+v",
    "command": "workbench.action.terminal.paste",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a",
    "command": "workbench.action.terminal.selectAll",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+`",
    "command": "workbench.action.terminal.focus",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+f",
    "command": "-workbench.action.terminal.focusFindWidget",
    "when": "terminalFocus"
  }
]